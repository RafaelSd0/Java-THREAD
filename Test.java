public class Test {

  public static void main(String[] args) {
    // Thread atual
    Thread t = Thread.currentThread();
    System.out.println(t.getName());

    Thread t1 = new Thread(new MyRunnable());

    //run nÃ£o cria uma nova linha de execuÃ§Ã£o, ele estÃ¡ executando na mesma thread
    t1.run();

    Thread t2 = new Thread( 
      () -> System.out.println(Thread.currentThread().getName())
    );
    // jÃ¡ com o start, de fato estou executando em outra thread
    t2.start();
    /*
    t2.start();
    
    java.lang.IllegalThreadStateException
        at java.lang.Thread.start(Thread.java:710)
        at Test.main(Test.java:17)
        
    NÃ£o pode usar a mesma tread mais de uma vez
    */
    t1.start();
    /*
      pq posso ter um start e um run na mesma instancia de uma tread no java


      O ChatGPT disse:
      Ã“tima pergunta, Rafael! Isso aÃ­ toca num ponto chave sobre como as threads funcionam em Java.

      ğŸ§  Conceitos BÃ¡sicos
      start() â†’ Ã© usado para iniciar uma nova thread. Quando vocÃª chama start(), a JVM cria um novo fluxo de execuÃ§Ã£o e chama automaticamente o mÃ©todo run() da sua classe.

      run() â†’ Ã© o cÃ³digo que serÃ¡ executado pela thread quando ela comeÃ§ar. VocÃª nunca chama run() diretamente se quiser executar em paralelo.

      ğŸ§µ Por que existem os dois (start() e run())?
      Porque eles fazem coisas diferentes:

      âœ… start():
      Cria uma nova thread.

      Aloca recursos no sistema operacional.

      Depois chama run() de forma assÃ­ncrona.

      SÃ³ pode ser chamado uma vez por instÃ¢ncia de Thread. Chamar start() de novo gera um IllegalThreadStateException.

      ğŸ“¦ run():
      Ã‰ apenas um mÃ©todo comum.

      Se vocÃª chamar diretamente (thread.run()), ele roda no mesmo fluxo de execuÃ§Ã£o atual, sem criar uma nova thread.

      Ã‰ como qualquer outro mÃ©todo â€” nÃ£o tem paralelismo.


    */
    t1.run();
    /*
     eu posso ter mais de um run mas ele n fez a mesma coisa 2 vezes


      O ChatGPT disse:
      Boa, Rafael! Isso que vocÃª falou â€” "posso ter mais de um run() mas ele nÃ£o fez a mesma coisa duas vezes" â€” Ã© um ponto que vale muito a pena destrinchar.

      Vamos por partes:

      âœ… Sim, vocÃª pode ter mÃºltiplas chamadas a run()... MAS
      Se vocÃª chamar run() mais de uma vez manualmente, vocÃª estÃ¡ apenas executando aquele mÃ©todo como se fosse qualquer outro â€” sem thread nova, sem paralelismo. EntÃ£o ele sÃ³ vai executar uma coisa de cada vez (como qualquer mÃ©todo comum em Java).

      Mas uma alternativa para usar o mesmo trecho de cÃ³digo seria utilizar o mesmo runnable
    */

  }
}